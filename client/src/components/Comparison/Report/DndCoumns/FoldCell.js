import { useState, useEffect } from 'react'
import { COMPARE_TYPES } from "../consts";
import { Tooltip } from 'antd'


const CpmResultViz = ({ result, compareType }) => {
  const getStatus = () => {
    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–≤–∞–ª–∏–¥–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
    if (!result?.is_valid) {
      return {
        color: "bg-gray-400",
        mainLabel: "‚ùî –ù–µ –ø—Ä–∏–º–µ–Ω–∏–º–æ",
        tooltipContent: (
          <div className="text-xs space-y-2">
            <p>–ú–µ—Ç–æ–¥ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è –Ω–µ–ø—Ä–∏–º–µ–Ω–∏–º:</p>
            <ul className="list-disc pl-4">
              <li>–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ</li>
              <li>–ù–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π –º–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞</li>
            </ul>
          </div>
        )
      }
    }

    // –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö
    const isIdentical = result.p_value === null
    const isSignificant = !isIdentical && result.p_value < 0.05
    const pValuePercent = isIdentical 
      ? '100%' 
      : (result.p_value * 100).toFixed(1)
    const isMcNemar = compareType === 'predicts'

    // –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–∫–∏
    const effectLabel = isIdentical 
      ? "‚â° –ò–¥–µ–Ω—Ç–∏—á–Ω–æ" 
      : isMcNemar 
        ? `œá¬≤=${result.statistic?.toFixed(1) || '?'}`
        : isSignificant 
          ? `${result.difference > 0 ? "‚ñ≤" : "‚ñº"} ${(Math.abs(result.difference)*100).toFixed(1)}%`
          : "‚âà –ù–µ—Ç —Ä–∞–∑–ª–∏—á–∏–π"

    const getTestDescription = () => {
      switch(compareType) {
        case 'ttest': return "–ü–∞—Ä–Ω—ã–π t-—Ç–µ—Å—Ç (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å—Ä–µ–¥–Ω–∏—Ö)"
        case 'wilcoxon': return "–¢–µ—Å—Ç –í–∏–ª–∫–æ–∫—Å–æ–Ω–∞ (—Ä–∞–Ω–≥–æ–≤—ã–π –∞–Ω–∞–ª–∏–∑)"
        case 'bootstrap': return "–ë—É—Ç—Å—Ç—Ä–µ–ø-–∞–Ω–∞–ª–∏–∑ (—Å—Ç–∞–±–∏–ª—å–Ω–æ—Å—Ç—å)"
        case 'predicts': return "–¢–µ—Å—Ç –ú–∞–∫–ù–µ–º–∞—Ä–∞ (—Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –∫–ª–∞—Å—Å–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–≤)"
        default: return "–°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑"
      }
    }

    const getColor = () => {
      if (isIdentical) return "bg-gray-300"
      if (isMcNemar) return isSignificant ? "bg-purple-500" : "bg-yellow-400"
      return isSignificant 
        ? (result.difference > 0 ? "bg-green-500" : "bg-red-500")
        : "bg-yellow-400"
    }

    const tooltipContent = (
      <div className="text-xs space-y-2">
        <div>
          <p className="font-medium mb-1">üìå –ú–µ—Ç–æ–¥ –∞–Ω–∞–ª–∏–∑–∞</p>
          <p>{getTestDescription()}</p>
        </div>

        {isIdentical ? (
          <div>
            <p className="font-medium mb-1">üîç –†–µ–∑—É–ª—å—Ç–∞—Ç</p>
            <p>–ú–æ–¥–µ–ª–∏ –ø–æ–∫–∞–∑–∞–ª–∏ –∞–±—Å–æ–ª—é—Ç–Ω–æ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã</p>
          </div>
        ) : isMcNemar ? (
          <div>
            <p className="font-medium mb-1">üìå –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è</p>
            <p>
              {isSignificant 
                ? "–û–±–Ω–∞—Ä—É–∂–µ–Ω—ã —Å—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∏ –∑–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è"
                : "–ó–Ω–∞—á–∏–º—ã–µ —Ä–∞–∑–ª–∏—á–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç"}
            </p>
          </div>
        ) : isSignificant ? (
          <div>
            <p className="font-medium mb-1">üìå –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π —ç—Ñ—Ñ–µ–∫—Ç</p>
            <p>
              {result.difference > 0 ? "–£–ª—É—á—à–µ–Ω–∏–µ" : "–£—Ö—É–¥—à–µ–Ω–∏–µ"} –Ω–∞<br/>
              <strong>{(Math.abs(result.difference)*100).toFixed(1)}%</strong>
            </p>
          </div>
        ) : (
          <div>
            <p className="font-medium mb-1">üìå –ö–ª—é—á–µ–≤–æ–π –≤—ã–≤–æ–¥</p>
            <p>–†–∞–∑–ª–∏—á–∏—è –Ω–µ –ø—Ä–µ–≤—ã—à–∞—é—Ç —Å–ª—É—á–∞–π–Ω—ã–µ –∫–æ–ª–µ–±–∞–Ω–∏—è</p>
          </div>
        )}

        <div>
          <p className="font-medium mb-1">üìä –°—Ç–∞—Ç–∏—Å—Ç–∏—á–µ—Å–∫–∞—è –∑–Ω–∞—á–∏–º–æ—Å—Ç—å</p>
          <p>
            {isIdentical ? (
              <span className="text-gray-600">–ú–æ–¥–µ–ª–∏ –∏–¥–µ–Ω—Ç–∏—á–Ω—ã</span>
            ) : isSignificant ? (
              <span className="text-green-600">p = {pValuePercent} &lt; 5%</span>
            ) : (
              <span className="text-amber-600">p = {pValuePercent} ‚â• 5%</span>
            )}
          </p>
        </div>

        {!isIdentical && compareType !== 'bootstrap' && result.statistic !== undefined  && (
          <div>
            <p className="font-medium mb-1">üîç –ó–Ω–∞—á–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏</p>
            <p>
              {compareType === 'wilcoxon' ? `W = ${result.statistic.toFixed(1)}` :
               compareType === 'predicts' ? `œá¬≤ = ${result.statistic.toFixed(1)}` :
               `t = ${result.statistic.toFixed(1)}`}
            </p>
          </div>
        )}
      </div>
    )

    return {
      color: getColor(),
      mainLabel: effectLabel,
      tooltipContent
    }
  }

  const { color, mainLabel, tooltipContent } = getStatus()

  return (
    <div className="w-[200px] h-[30px] flex items-center justify-between px-2 bg-white">
      <span className="text-[13px] font-medium text-gray-800">
        {mainLabel}
      </span>

      <Tooltip 
        title={tooltipContent}
        overlayClassName="max-w-[260px]"
        placement="bottomRight"
      >
        <div className={`w-3 h-3 rounded-full ${color} shadow-md cursor-help 
          hover:scale-110 transition-transform`} />
      </Tooltip>
    </div>
  )
}

const FoldCell = ({ value, compareType, referenceValue, showComparison }) => {
    if (!showComparison)
        return ''
    const hash = referenceValue?.hash;
    const cmps = value?.cmps;
    const cmpRes = cmps[hash];

    return (<CpmResultViz result={cmpRes} compareType={compareType}/>)
}

export default FoldCell;